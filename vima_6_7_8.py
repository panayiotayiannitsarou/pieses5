
# ➤ Βήμα 6 – Φιλικές Ομάδες ανά Γνώση Ελληνικών
def βημα_6_φιλικες_ομαδες_γλωσσικα(df, tmimata):
    υπολοιποι = df[(df['ΤΜΗΜΑ'].isna()) & (df['ΚΛΕΙΔΩΜΕΝΟΣ'] == False)]
    ονοματα = υπολοιποι['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'].tolist()
    φιλιες = []
    for i in range(len(ονοματα)):
        for j in range(i + 1, len(ονοματα)):
            a, b = ονοματα[i], ονοματα[j]
            if is_mutual_friend(df, a, b) and not has_conflict(df, a, b):
                φιλιες.append({a, b})
    ομάδες = []
    while φιλιες:
        ομάδα = φιλιες.pop(0)
        συγχωνεύθηκε = False
        for i, υπ in enumerate(φιλιες):
            if ομάδα & υπ:
                νέα_ομάδα = ομάδα | υπ
                if len(νέα_ομάδα) <= 3:
                    ομάδες.append(list(νέα_ομάδα))
                    φιλιες.pop(i)
                    συγχωνεύθηκε = True
                    break
        if not συγχωνεύθηκε:
            ομάδες.append(list(ομάδα))
    κατηγοριες = {'καλη': [], 'οχι': [], 'μικτη': []}
    for ομάδα in ομάδες:
        γνωσεις = [df.loc[df['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'] == m, 'ΚΑΛΗ ΓΝΩΣΗ ΕΛΛΗΝΙΚΩΝ'].values[0] for m in ομάδα]
        if all(g == 'Ν' for g in γνωσεις):
            κατηγοριες['καλη'].append(ομάδα)
        elif all(g == 'Ο' for g in γνωσεις):
            κατηγοριες['οχι'].append(ομάδα)
        else:
            κατηγοριες['μικτη'].append(ομάδα)
    for κατηγορια in ['οχι', 'καλη', 'μικτη']:
        for ομάδα in κατηγοριες[κατηγορια]:
            καταλληλα = []
            for τμημα in tmimata:
                αν_χωρα = len(tmimata[τμημα]) + len(ομάδα) <= 25
                αν_συγκρουση = any(has_conflict(df, m, a) for m in ομάδα for a in tmimata[τμημα])
                if αν_χωρα and not αν_συγκρουση:
                    καταλληλα.append(τμημα)
            if καταλληλα:
                επιλογη = min(καταλληλα, key=lambda t: abs(
                    sum(df.loc[df['ΤΜΗΜΑ'] == t, 'ΚΑΛΗ ΓΝΩΣΗ ΕΛΛΗΝΙΚΩΝ'] == 'Ν') -
                    sum(df.loc[df['ΤΜΗΜΑ'] == t, 'ΚΑΛΗ ΓΝΩΣΗ ΕΛΛΗΝΙΚΩΝ'] == 'Ο')
                ))
                for μαθητης in ομάδα:
                    τοποθετηση(df, tmimata, μαθητης, επιλογη)

# ➤ Βήμα 7 – Υπόλοιποι Μαθητές Χωρίς Φιλίες
def βημα_7_χωρις_φιλους(df, tmimata):
    υποψηφιοι = df[(df['ΤΜΗΜΑ'].isna()) & (df['ΚΛΕΙΔΩΜΕΝΟΣ'] == False)].copy()
    def εχει_αμοιβαια_φιλια(μαθητης):
        φιλοι = str(df.loc[df['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'] == μαθητης, 'ΦΙΛΙΑ'].values[0]).split(',')
        φιλοι = [f.strip() for f in φιλοι if f.strip()]
        for φ in φιλοι:
            if φ in df['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'].values and is_mutual_friend(df, μαθητης, φ):
                if df.loc[df['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'] == φ, 'ΤΜΗΜΑ'].isna().values[0]:
                    return True
        return False
    χωρις_φιλους = [m for m in υποψηφιοι['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'] if not εχει_αμοιβαια_φιλια(m)]
    for μαθητης in χωρις_φιλους:
        καλυτερο_τμημα = None
        καλυτερο_score = float('inf')
        for τμημα in tmimata:
            αν_χωρα = len(tmimata[τμημα]) < 25
            αν_συγκρουση = any(has_conflict(df, μαθητης, m) for m in tmimata[τμημα])
            if not αν_χωρα or αν_συγκρουση:
                continue
            ομαδα = df[df['ΤΜΗΜΑ'] == τμημα]
            φυλο = df.loc[df['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'] == μαθητης, 'ΦΥΛΟ'].values[0]
            ελληνικα = df.loc[df['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'] == μαθητης, 'ΚΑΛΗ ΓΝΩΣΗ ΕΛΛΗΝΙΚΩΝ'].values[0]
            μαθησιακη = df.loc[df['ΟΝΟΜΑΤΕΠΩΝΥΜΟ'] == μαθητης, 'ΙΚΑΝΟΠΟΙΗΤΙΚΗ ΜΑΘΗΣΙΑΚΗ ΙΚΑΝΟΤΗΤΑ'].values[0]
            count_φυλο = len(ομαδα[ομαδα['ΦΥΛΟ'] == φυλο])
            count_ελληνικα = len(ομαδα[ομαδα['ΚΑΛΗ ΓΝΩΣΗ ΕΛΛΗΝΙΚΩΝ'] == ελληνικα])
            count_μαθησιακη = len(ομαδα[ομαδα['ΙΚΑΝΟΠΟΙΗΤΙΚΗ ΜΑΘΗΣΙΑΚΗ ΙΚΑΝΟΤΗΤΑ'] == μαθησιακη])
            score = count_φυλο + count_ελληνικα + count_μαθησιακη
            if score < καλυτερο_score:
                καλυτερο_score = score
                καλυτερο_τμημα = τμημα
        if καλυτερο_τμημα:
            τοποθετηση(df, tmimata, μαθητης, καλυτερο_τμημα)

# ➤ Βήμα 8 – Τελικός Έλεγχος Αποκλίσεων
def βημα_8_τελικος_ελεγχος(df, tmimata):
    χαρακτηριστικά = ['ΦΥΛΟ', 'ΚΑΛΗ ΓΝΩΣΗ ΕΛΛΗΝΙΚΩΝ', 'ΙΚΑΝΟΠΟΙΗΤΙΚΗ ΜΑΘΗΣΙΑΚΗ ΙΚΑΝΟΤΗΤΑ']
    max_diff = 3
    τμηματα = list(tmimata.keys())
    αποκλισεις = []
    for x in χαρακτηριστικά:
        μοναδικες = df[x].dropna().unique()
        for τιμή in μοναδικες:
            for i in range(len(τμηματα)):
                for j in range(i + 1, len(τμηματα)):
                    τμ1, τμ2 = τμηματα[i], τμηματα[j]
                    count1 = len(df[(df['ΤΜΗΜΑ'] == τμ1) & (df[x] == τιμή)])
                    count2 = len(df[(df['ΤΜΗΜΑ'] == τμ2) & (df[x] == τιμή)])
                    diff = abs(count1 - count2)
                    if diff > max_diff:
                        αποκλισεις.append(f"⚠️ Απόκλιση {diff} για '{x} = {τιμή}' μεταξύ {τμ1} και {τμ2}")
    return αποκλισεις
